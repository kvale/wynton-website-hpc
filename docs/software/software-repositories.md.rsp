<%@meta postprocess="FALSE"%>
<%-- Add a front-matter warning to the Markdown file --%>
<!--
WARNING: Do _not_ update this file; it is automatically generated from software-respository.md.rsp.
-->
<%
library(utils)
library(R.utils)

trim <- function(x) {
  if (!is.character(x)) return(x)
  x <- sub("^[\t\n\f\r ]*", "", x)
  sub("[\t\n\f\r ]*$", "", x)
}
as_html <- function(x) {
  if (!is.character(x)) return(x)
  x <- commonmark::markdown_html(x, extensions = TRUE)
  x <- gsub("(^<p>|</p>\n$)", "", x)
  x
}

style <- R.utils::cmdArg(style = FALSE)

#' @importFrom utils file_test
module_avail <- local({
  ## Memoization
  .cache <- list()
  
  function(info) {
    message("module_avail() ...", appendLF = FALSE)
    stopifnot(is.list(info), "module_path" %in% names(info))
    module_path <- info$module_path
    key <- paste(module_path, collapse = ", ")
    res <- .cache[[key]]
    if (!is.null(res)) {
      message("already cached")
      return(res)
    }

    message(""); R.utils::mstr(list(info = info))
    stopifnot(all(utils::file_test("-x", module_path)))
    lmod_dir <- file.path(Sys.getenv("LMOD_DIR"))
    stopifnot(nzchar(lmod_dir))
    spider <- file.path(lmod_dir, "spider")
    message(" - spider binary: ", sQuote(spider))
    stopifnot(utils::file_test("-x", spider))
    args <- c("--no_recursion", "-o jsonSoftwarePage", module_path)
    message(" - spider arguments: ", paste(args, collapse = " "))
    json <- system2(spider, args = args, stdout = TRUE)
    x <- jsonlite::fromJSON(json)
    o <- order(x$package)
    x <- x[o,]
    keep <- !grepl("^[.]", x$package)
    x <- x[keep,]
    message("done")

    .cache[[key]] <<- x

    x
  }
})

module_repositories <- list(
  "built-in" = list(
    name        = "built-in",
    maintainer  = "{{ site.cluster.nickname }} Systems Administrators",
    group       = "{{ site.cluster.name }}",
    url         = "{{ '/about/contact.html' | relative_url }}",
    contributed = FALSE,
    module_path = c("/wynton/home/opt/modules", "/etc/modulefiles")
  ),

  CBI = list(
    name        = "CBI",
    maintainer  = "Henrik Bengtsson",
    group       = "Computational Biology and Informatics",
    url         = "http://cbi.ucsf.edu",
    contributed = TRUE,
    module_path = Sys.getenv("MODULE_ROOT_CBI")
  ),

  Sali = list(
    name        = "Sali",
    maintainer  = "Ben Webb",
    group       = "Sali Lab Software Repository",
    url         = "https://salilab.org/",
    contributed = TRUE,
    module_path = Sys.getenv("MODULE_ROOT_Sali", "/salilab/diva1/home/modules-py27")
  )
)

%>
<% if (style) { %>
<style type="text/css">
table {
  width: 100%;
  border: solid 1px black;
}
  
tr {
  vertical-align: top;
  text-align: left;
  padding: 0px;
}
  
tr:nth-child(even) {
  background-color: #f2f2f2;
}

tr:hover {
  background-color: #f5f5f5;
}

th {
    background-color: #4CAF50;
    color: white;
}
th, td {
  vertical-align: top;
  border-bottom: 1px solid #ddd;
}
</style>
<% } # if (style) %>
<% table_of_modules <- function(modules, style = c("module", "repos")) { %>
<% style <- match.arg(style) %>
<dl>
<% for (ii in seq_len(nrow(modules))) { %>
<%
m <- modules[ii,]
m <- lapply(m, FUN = trim)
versions <- m$versions[[1]]
for (cc in seq_len(ncol(versions))) {
  versions[[cc]] <- trim(versions[[cc]])
}
m$versions[[1]] <- versions
m$parent <- m$versions[[1]]$parent
R.utils::cstr(m)
R.utils::cstr("--------")
m$parent <- unique(unlist(m$parent, use.names = FALSE))
R.utils::cstr(m)
## FIXME /HB 2021-05-05
stopifnot(length(m$parent) <= 1L)
if (!is.null(m$parent) && !is.element(m$parent, c("CBI-testing"))) m$parent <- NULL
helps <- unique(versions$help)
help <- helps[[1]]
vers <- NULL
if (!is.null(versions$versionName)) {
  vers <- unique(versions$versionName)
  if (length(vers) > 1L || vers != "default") {
    idx <- match(m$defaultVersionName, table = vers)
    if (length(idx) == 1) {
      ## FIXME: spider seems to set 'defaultVersionName' randomly /HB 2017-06-30
      vers[idx] <- sprintf("<em>%s</em>", vers[idx])
    }
  } else {
    vers <- NULL
  }
}

## Extract 'Nnnn: ' content from the end.
if (length(m$description) > 0L) {
  pattern <- "(.*) (Examples?|Note|Warning): (.*)"
  while(grepl(pattern, m$description)) {
    name <- gsub(pattern, "\\2", m$description)
    name <- sub("s$", "", name)
    name <- tolower(name)
    m[[name]] <- gsub(pattern, "\\3", m$description)
    m$description <- gsub(pattern, "\\1", m$description)
  }
}


%>
  <dt><%= m$package %><% if (!is.null(m$parent)) cat(sprintf(" (part of %s)", m$parent)) %></dt>
  <dd>
  <% if (!is.null(help)) { %>
    <strong><%= as_html(help) %></strong><br>
  <% } %>
  <% if (!is.null(m$description) && !is.na(m$description)) { %>
    <%= as_html(m$description) %><br>
  <% } %>
  <% if (!is.null(m$example)) { %>
    Example: <%= as_html(m$example) %><br>
  <% } %>
  <% if (!is.null(m$note)) { %>
    Note: <%= as_html(m$note) %><br>
  <% } %>
  <% if (!is.null(m$url) && !is.na(m$url)) { %>
    URL: <%= as_html(m$url) %><br>
  <% } %>
  <% if (!is.null(m$warning) && !is.na(m$warning)) { %>
    Warning: <%= as_html(m$warning) %><br>
  <% } %>
  Versions: <%= paste(vers, collapse = ", ") %><br>
  <% if (!is.null(m$parent)) { %>
  <% R.utils::mstr(m) %>
    Note: <em>To use this module, call <code>module load <%= attr(x, "repository") %> <%= m$parent %></code> first.</em>
  <% } %>
  </dd>

<% } # for (ii in ...) %>
</dl>
<% } ## table_of_modules() %>

<%---
<div class="alert alert-warning" role="alert">
<strong>This page is under construction: For currently available software modules, use `module avail`.</strong>
</div>
---%>


# Software Repositories

In addition to the [core software] tools that are available by default, additional software is available via _environment modules_.  For example, although MATLAB is installed on the system, it is not available by default. Instead, we need to "load" its module first, e.g.

```sh
[alice@{{ site.devel.name }} ~]$ module load matlab
[alice@{{ site.devel.name }} ~]$ module list

Currently Loaded Modules:
  1) matlab/2020a
```
Then we can launch MATLAB using:
```sh
[alice@{{ site.devel.name }} ~]$ matlab -nosplash -nodesktop
```

To see what other "built-in" modules are available, use:

```sh
[alice@{{ site.devel.name }} ~]$ module avail
```


In additional a set of built-in environment modules, there are also modules for software tools that are installed and maintained by other users or research groups.  To access these, we first need to load the corresponding "Software Repository" module.  For example, to get access to the repository and the software shared by the UCSF Computation Biology and Informatics core (CBI), make sure to load ("enable") the repository first, e.g.

```sh
module load CBI
```

Then use `module avail` to list what modules and versions are available (or see below).  Next, to actually get access to one or more of the shared software modules, use `module load <name>` or `module load <name>/<version>`.  Here are a few examples:
```sh
module load bowtie2
module load bowtie2/2.2.6
module load r
```

It is possible to (i) enable a software repository and (ii) load a set of software tools in one call, e.g.
```sh
module load CBI r bwa bowtie2/2.2.6
```


Below are <%= length(module_repositories) %> software repositories, each providing a set of software tools.

<% repos_buttons <- function() { %>
<ul class="nav nav-pills">
<% for (kk in seq_along(module_repositories)) { %>
<%
  name <- names(module_repositories)[kk]
  info <- module_repositories[[name]]
  modules <- module_avail(info)
  nbr_of_modules <- nrow(modules)
%>
  <li<%= if (kk == 1) ' class="active"' %>><a data-toggle="pill" href="#queues-<%= name %>"><span style="font-weight: bold;"><%= name %></span>&nbsp;(<%= nbr_of_modules %>)</a></li>
<% } ## for (name ...) %>
</ul>
<% } %>

<% repos_buttons() %>

<div class="tab-content" style="margin-top: 1ex;">
<%for (kk in seq_along(module_repositories)) { %>
<%
  name <- names(module_repositories)[kk]
  info <- module_repositories[[name]]
  modules <- module_avail(info)
  nbr_of_modules <- nrow(modules)
  attr(modules, "repository") <- name
%>
<div id="queues-<%= name %>" class="tab-pane fade<%= if (kk == 1) 'in active' %>">

<h2>Module Software Repository: <%= name %> (<%= nbr_of_modules %>)</h2>

Maintained by: <%= info$maintainer %>, <a href="<%= info$url %>"><%= info$group %></a><br>
<% if (!info$contributed) { %>
Enable repository: <em>this software repository is always enabled</em><br>
<% } else { %>
Enable repository: <code>module load <%= name %></code><br>

<div class="alert alert-warning" role="alert" style="margin-top: 3ex">
Please note that this software stacks is maintained and contributed by a research group on a voluntary basis. It is <em>not</em> maintained by the {{ site.cluster.name }} admins. Please reach out to the corresponding maintainer for bug reports, feedback, or questions.
</div>
<% } %>

<% table_of_modules(modules) %>
</div> <%-- <div id="queues-<%= name %>" class="tab-pane fade<%= if (kk == 1) 'in active' %>"> --%>

<% } ## for (name ...) %>

</div> <%-- <div class="tab-content" style="margin-top: 1ex;"> --%>

<% repos_buttons() %>

_The above information was automatically generated on <%= Sys.time() %> from querying `module avail` and `module spider`._


<style>
dl {
  display: block;
}
dt {
  font-family: Menlo, Monaco, Consolas, "Courier New", monospace;
  font-weight: bold;
  font-size: 120%;
  margin-top: 1ex;
  text-decoration: underline;
}
dt:after {
  content: "";
}
</style>

[core software]: {{ '/software/core-software.html' | relative_url }}
